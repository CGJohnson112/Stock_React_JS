{"version":3,"sources":["Stock.js","App.js","serviceWorker.js","index.js"],"names":["stockName","Stock","props","state","value","stockChartXValues","stockChartYValues","stkName","handleChange","bind","handleSubmit","event","this","setState","target","cat","document","getElementById","innerHTML","fetchStock","preventDefault","pointerToThis","API_Call","stockChartXValuesFunction","stockChartYValuesFunction","fetch","then","response","json","data","key","push","className","onSubmit","type","onChange","id","x","y","mode","marker","color","layout","width","height","title","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sOAGIA,EAAY,OAkHDC,E,kDA9GX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,MAAM,GACNC,kBAAmB,GACnBC,kBAAmB,GACnBC,QAASP,GAIb,EAAKQ,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAXL,E,yDAcNE,GACTC,KAAKC,SAAS,CAACT,MAAOO,EAAMG,OAAOV,U,mCAGxBO,GAEX,IAAMI,EAAMC,SAASC,eAAe,QAAQC,UAAaN,KAAKT,MAAMC,MACpEJ,EAAYe,EACZH,KAAKC,SAAST,MAAQW,EACtBH,KAAKO,aACLR,EAAMS,mB,0CAINR,KAAKO,e,mCAKG,IAAME,EAAgBT,KAGlBU,EAAQ,uFAAmFtB,EAAnF,sCADI,oBAEZuB,EAA2B,GAC3BC,EAA2B,GAE/BC,MAAMH,GACDI,MACG,SAASC,GACL,OAAOA,EAASC,UAGvBF,MACG,SAASG,GAGL,IAAK,IAAIC,KAAOD,EAAK,uBACjBN,EAA0BQ,KAAKD,GAC/BN,EAA0BO,KAAKF,EAAK,uBACnCC,GAAK,YAKVT,EAAcR,SAAS,CACnBR,kBAAmBkB,EACnBjB,kBAAmBkB,IAOnBxB,IACAgB,SAASC,eAAe,QAAQC,UAAW,uC,+BAQnE,OACI,yBAAKc,UAAU,OAEX,6BAEA,yBAAKA,UAAU,cAChB,0BAAMC,SAAUrB,KAAKF,cAChB,2BAAOwB,KAAK,OAAOF,UAAU,eAAe5B,MAAOQ,KAAKT,MAAMC,MAAO+B,SAAUvB,KAAKJ,eAChF,4BAAQ0B,KAAK,SAASF,UAAU,iCAAhC,kBAIR,uHACA,6CAAkB,0BAAMI,GAAG,QAAT,SAElB,kBAAC,IAAD,CACIP,KAAM,CACN,CAGIQ,EAAGzB,KAAKT,MAAME,kBACdiC,EAAG1B,KAAKT,MAAMG,kBACd4B,KAAM,UACNK,KAAM,gBACNC,OAAQ,CAACC,MAAO,aAGpBC,OAAS,CAACC,MAAO,IAAKC,OAAQ,IAAKC,MAAO,kC,GAzG1CC,aCQLC,MATf,WACE,OACE,yBAAKf,UAAU,OAEb,kBAAC,EAAD,QCIcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvC,SAASC,eAAe,SDwHpB,kBAAmBuC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d2b88c48.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Plot from 'react-plotly.js';\n\nlet stockName = \"MSFT\";\n\nclass Stock extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            value:'',\n            stockChartXValues: [],\n            stockChartYValues: [],\n            stkName: stockName\n            \n        }\n        //get the changes from the form field and change the stock symbol in the 'demo' span\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    \n    }\n    handleChange(event) {\n        this.setState({value: event.target.value});\n      }\n    \n      handleSubmit(event) {\n        //changes the new stock symbol, prevents page from refreshing to default\n        const cat = document.getElementById(\"demo\").innerHTML =  this.state.value;\n        stockName = cat;\n        this.setState.value = cat;\n        this.fetchStock();\n        event.preventDefault();\n      }\n\n    componentDidMount(){\n        this.fetchStock();\n            }\n            //API KEY H8A1GBM1WNT6EMER for ALphaVantage\n            fetchStock(){\n\n                const pointerToThis = this;\n                //console.log(pointerToThis);\n                const API_KEY = 'H8A1GBM1WNT6EMER';\n                let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${stockName}&outputsize=compact&apikey=${API_KEY}`;\n                let stockChartXValuesFunction =[];\n                let stockChartYValuesFunction =[];\n     \n                fetch(API_Call)\n                    .then(\n                        function(response) {\n                            return response.json();\n                        }\n                    )\n                    .then(\n                        function(data) {\n                            //console.log(data);\n                            //gets the variables for the X and Y data \n                            for (var key in data['Time Series (Daily)']) {\n                                stockChartXValuesFunction.push(key);\n                                stockChartYValuesFunction.push(data['Time Series (Daily)']\n                                [key]['1. open']);\n                                //console.log(key);\n                            }\n                    \n                            //console.log(stockChartXValuesFunction);\n                            pointerToThis.setState({\n                                stockChartXValues: stockChartXValuesFunction,\n                                stockChartYValues: stockChartYValuesFunction,\n                                \n                            });\n\n                            //Gets the stock symbol \n                            //if no data, a message is sent to user\n                            \n                            if(!stockName){\n                                document.getElementById('demo').innerHTML= \"Nothing available at this time\";\n                            }                \n                            \n                        } \n                    )              \n            }\n                    \n    render() {\n        return (\n            <div className=\"App\">\n               \n                <br />\n                \n                <div className=\"form-group\">\n               <form onSubmit={this.handleSubmit}>\n                    <input type=\"text\" className=\"form-control\" value={this.state.value} onChange={this.handleChange}/>\n                        <button type=\"submit\" className=\"form-control btn btn-whatever\" >Select Stock</button>\n                </form>\n                    \n                </div>\n                <h1>Capitalism is Evil! Иосиф Сталин</h1>\n                <h4>Stock Symbol: <span id=\"demo\">MSFT</span></h4>\n                \n                <Plot\n                    data={[\n                    {\n                        //labels\n                        \n                        x: this.state.stockChartXValues,\n                        y: this.state.stockChartYValues,\n                        type: 'scatter',\n                        mode: 'lines+markers',\n                        marker: {color: '#333444'},\n                    }\n                    ]}\n                    layout={ {width: 720, height: 440, title: 'Alphavantage Data Chart'} }\n                />\n            </div>\n        )\n    }\n}\n\nexport default Stock\n","import React from 'react';\nimport Stock from './Stock';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n \n      <Stock />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}